# -*- coding: utf-8 -*-
"""Final_sub2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ebiRUvUz47oZBZVebyK1xEUcYB4NR7z
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d 'balabaskar/silver-prices-1968-2021'

import zipfile

dataset_zip = zipfile.ZipFile('silver-prices-1968-2021.zip')

dataset_zip.extractall()

dataset_zip.close()

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv('LBMA-SILVER.csv')
df.info()

df

df.isnull().sum()

del df['EURO']
df = df.dropna()
df.isnull().sum()

df_plot = df
df_plot[df_plot.columns.to_list()].plot(subplots=True, figsize=(20, 15))
plt.show()

dates = df['Date'].values
usd = df['USD'].values

dates = np.array(dates)
usd = np.array(usd)

plt.figure(figsize=(20,5))
plt.plot(dates, usd)

plt.title('Silver price in USD currency in a Day', fontsize = 25)
plt.xlabel('Datetime', fontsize = 10)
plt.ylabel('Temperature', fontsize = 10)

df.dtypes

df['Date'] = pd.to_datetime(df['Date'])
df = df.set_index('Date')

data_by_month = df.resample('A').mean()

time = data_by_month.index.values
test = data_by_month['USD'].values

plt.figure(figsize=(20,5))
plt.plot(time, test)
plt.title('Average Silver price in USD currency in a Year', fontsize = 25)
plt.ylabel('Value', fontsize = 15)
plt.xlabel('Year', fontsize = 15)
plt.grid(color='grey')

usd = np.array(df['USD'])
usd = usd.reshape(-1, 1)

scaler = MinMaxScaler()
usd = scaler.fit_transform(usd)

usd_train, usd_valid, dates_train, dates_valid = train_test_split(usd, dates, train_size=0.8, test_size = 0.2, shuffle = False )

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(usd_train, window_size=64, batch_size=200, shuffle_buffer=1000)
val_set = windowed_dataset(usd_valid, window_size=64, batch_size=200, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(128, return_sequences=True, input_shape=[None, 1]),
  tf.keras.layers.LSTM(128),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(16, activation="relu"),
  tf.keras.layers.Dense(1),
])

threshold_mae = (usd.max() - usd.min()) * 10/100
print(threshold_mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < threshold_mae and logs.get('val_mae') < threshold_mae):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=800, validation_data = val_set, callbacks=[callbacks])

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

